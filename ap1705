// #include <Scheduler.h>
#include <Arduino.h>
#include <DueTimer.h>

// Khai bao bien PID
int status = 0;
const float kp = 4;
const float ki = 3;
const float kd = 0;
float last_error = 0;
float P,I,D;
float error = 0;
const int outputMax = 10000;  // fmax
const int outputMin = 100;    // fmin
float output;
float pressure;
int frequency;

// DRIVER STEP MOTTOR
const int pin_pulse = 2;      // pin control pulse,speed
const int pin_direct = 3;     // pin control direct
volatile bool state = false;  // Trạng thái của chân xung
// khai bao bien luu gia tri ap suat
String incomingChar = "";
float setPointPressuse = 0;
// Khai bao chan Valve
const int val1 = 4;
const int val2 = 5;
const int deltaP = 30;  //?

// Nếu sai số bằng 1/1000 thì động cơ dừng
long decimalPart = (long)((pressure - (long)pressure) * 10000);

// Ham cap nhat trang thai chan pulse
void togglePin() {
  state = !state;                  // Đảo trạng thái
  digitalWrite(pin_pulse, state);  // Cập nhật trạng thái chân
}
void setpoint() {
  if (Serial.available() > 0) {                      // Kiểm tra xem có dữ liệu được gửi từ Seria Monitor hay không
    String setPoint = Serial.readStringUntil('\n');  // Đọc dữ liệu từ Serial Monitor đến khi gặp ký tự '\n' (ký tự xuống dòng)

    setPointPressuse = setPoint.toFloat();          // Chuyển đổi chuỗi sang số dạng float
    if (setPointPressuse > 100) {
      setPointPressuse = 100;
    }
    // Serial.print("\n");
    // Serial.print("Set Point Pressuse: ");
    // Serial.println(setPointPressuse);  // In số float đã nhận được
    if(setPointPressuse < 0.05){ //dừng
      callPressure();
      setPointPressuse = pressure;
       Stop_PID();
    }
  }
  if (Serial2.available() > 0) {                      // Kiểm tra xem có dữ liệu được gửi từ Seria Monitor hay không
    String setPoint = Serial2.readStringUntil('\n');  // Đọc dữ liệu từ Serial Monitor đến khi gặp ký tự '\n' (ký tự xuống dòng)
    setPointPressuse = setPoint.toFloat();          // Chuyển đổi chuỗi sang số dạng float
    if (setPointPressuse > 100) {
      setPointPressuse = 100;
    }
    // Serial.print("\n");
    // Serial.print("Set Point Pressuse: ");
    // Serial.println(setPointPressuse);  // In số float đã nhận được
    if(setPoint == 0){ //dừng
      callPressure();
      setPointPressuse = pressure;
       Stop_PID();
    }
  }
}
// Hàm cập nhật áp suất theo thời gian
void callPressure() {
  // Gửi yêu cầu tới thiết bị
  // Serial.println("Request: ");
  Serial1.write("#*?");
  Serial1.write(13);
  String incomingChar = "";
  delay(10);                      // thời gian nhỏ nhất 8ms 50HZ
  if (Serial1.available() > 0) {  // Kiểm tra xem có dữ liệu nào được gửi đến không
    incomingChar = Serial1.readString();
    // Serial.println(incomingChar);
    String data = "       ";
    for (int i = 0; i < incomingChar.length(); i++) {
      data[i] = incomingChar[i + 4];
    }
    pressure = data.toFloat();
    // Serial.println("Pressure: ");
    // Serial.println(pressure, 4);
  }
}
// Hàm hiển thị serial
void dataSerial() {
  Serial.print(pressure, 4);
  Serial.print(",");
  Serial.print(setPointPressuse, 4);
  Serial.print(",");
  Serial.print(error, 4);  // tỷ lệ với v
  Serial.print(",");
  Serial.println(frequency);
}
// Hàm điều khiển van

void Stop_PID() {
 //STOP
    I = 0;
    output = 0;
    frequency = 1;
    Timer3.stop();
    digitalWrite(pin_pulse, LOW);
}

// PID hàm điều khiển động cơ
void control_servo() {
  callPressure();
  error = setPointPressuse - pressure;
  //   Serial.println("error");
  //   Serial.println(error);
  if (error > 0) {
    digitalWrite(pin_direct, LOW);  // hướng quay thuận
  } else {
    digitalWrite(pin_direct, HIGH);  // hướng quay nghịch
  }
  error = abs(error);
  // float P = error * kp;
  // float I += error * ki;
  // output = P + I;
  // last_error = error;
  //Serial.println(output);
    if(90 <= error) frequency = 50000;Timer3.setFrequency(frequency).start();
    if(80 <= error && error < 90) frequency = 25000;Timer3.setFrequency(frequency).start();
    if(70 <= error && error < 80) frequency = 20000;Timer3.setFrequency(frequency).start();
    if(60 <= error && error < 70) frequency = 15000;Timer3.setFrequency(frequency).start();
    if(40 <= error && error < 60) frequency = 10000;Timer3.setFrequency(frequency).start();
    if(20 <= error && error < 40) frequency = 8000;Timer3.setFrequency(frequency).start();
    if(1 <= error && error < 20) frequency = 5000;Timer3.setFrequency(frequency).start();
    if (0<= error && error < 1) {
      //PI
      P = error * kp;
      I += error * ki;
      output = P + I;
      if (I > outputMax){
        I = outputMax;
      }
      if (I > outputMin) I = outputMin;
      if (output > outputMax) output = outputMax;
      if (output < outputMin) output = outputMin;
      frequency = 2 * output;
      if (error < 0.01) {  // STOP
      Stop_PID();
      setPointPressuse = setPointPressuse -5;
      } else {
        // tone(pin_pulse, frequency);
        Timer3.setFrequency(frequency).start();
      }
  }
}


void setup() {
  Serial.begin(9600, SERIAL_8N1);
  Serial1.begin(9600, SERIAL_8N1);  // Khởi tạo giao tiếp UART với baud rate là 9600, 8 bit dữ liệu, no parity, 1 stop bit
  Serial2.begin(9600, SERIAL_8N1);
  pinMode(pin_pulse, OUTPUT);
  pinMode(pin_direct, OUTPUT);
  Timer3.attachInterrupt(togglePin).setFrequency(1).start();
  Timer3.stop();
  digitalWrite(pin_pulse, LOW);
  // khai bao chan valve
  pinMode(val1, OUTPUT);
  pinMode(val2, OUTPUT);
  // 2 van mở , trong vòng Xs đẩy hết khí thì 2 van đóng
  digitalWrite(val1, 1);
  digitalWrite(val2, 1);
  delay(3000);
  // off bơm ac
  while (setPointPressuse == 0) {
    setpoint();
    callPressure();
  }
  digitalWrite(val1, 0);  //van1 đóng
  digitalWrite(val2, 0);  // van2 đóng
  callPressure();
}
// void updateSetpoint() {}
void loop() {

  setpoint();
  control_servo();
  dataSerial();


  //   if (pressure == setPointPressuse) {
  //     callPressure();
  //     digitalWrite(val1, 0);  // ngat bom AC
  //     digitalWrite(val2, 0);
  //     dataSerial();
  //   }
  //   if (pressure > setPointPressuse) {  // nếu áp lớn hơn setpoint => xả van 2
  //     digitalWrite(val2, 1);            // mở van 2
  //     callPressure();
  //     if (int(pressure) == int(setPointPressuse)) {
  //       digitalWrite(val2, 0);
  //       break;
  //     }
  //   }
  //   if (pressure < setPointPressuse) {
  //     //nếu delta P(độ điều chỉnh pittong) nhỏ hơn sai lệch thì dùng bơm AC
  //     if (deltaP < setPointPressuse - pressure) {
  //       digitalWrite(val1, 1);  // mở van 1
  //       digitalWrite(val2, 0);  // đóng van 2
  //       while (1) {
  //         callPressure();
  //         dataSerial();
  //         //Serial.println("AC on");
  //         if (pressure == setPointPressuse) {
  //           //Serial.println("AC off");
  //           digitalWrite(val1, 0);  // ngat bom AC + đóng van 1
  //           break;
  //         }
  //       }
  //     } else {
  //       //nếu độ điều chỉnh của pittong có thể điều chỉnh được thì chạy servor thì cho servo chạy tiến để tăng áp
  //       while (1) {
  //         dataSerial();
  //         PID();
  //         digitalWrite(val2, 0);  //khoas van 2
  //         if (pressure == setPointPressuse) {
  //           break;
  //         }
  //       }//end while
  //     }//end else
  //   }//end if - p< pset
}  // end loop
